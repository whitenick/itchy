{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst is_1 = require(\"@sindresorhus/is\");\n\nclass Debuggee {\n  /**\n   * Creates a Debuggee service object.\n   * @ref https://cloud.google.com/debugger/api/reference/rest/v2/Debuggee\n   *\n   * @param {object} properties - an object with properties to use for Debuggee\n   *     initialization.\n   * @param {object} properties.project - Google Cloud Project ID\n   * @param {string} properties.uniquifier - Debuggee uniquifier within the\n   *     project. Any string that identifies the application within the project\n   *     can be used. Including environment and version or build IDs is\n   *     recommended.\n   * @param {string} properties.description - A user specified string identifying\n   *     this debuggable instance.\n   * @param {?string} properties.agentVersion - version ID of the agent. (default:\n   *     the version of this module)\n   * @param {?object} labels - a set of custom properties about the debuggee that\n   *     are reported to the service.\n   * @param {?array<object>} properties.sourceContexts\n   * @param {?StatusMessage} properties.statusMessage - A error string to register\n   *     this as an erroring debuggable instance. This is useful if we have a\n   *     problem starting the debugger support, and want to report to the API so\n   *     that the user has a way of noticing.\n   *     TODO(ofrobots): has this been renamed to `status` in the API?\n   */\n  constructor(properties) {\n    if (!(this instanceof Debuggee)) {\n      return new Debuggee(properties);\n    }\n\n    properties = properties || {};\n\n    if (!is_1.default.string(properties.project)) {\n      throw new Error('properties.project must be a string');\n    }\n\n    if (!is_1.default.string(properties.uniquifier)) {\n      throw new Error('properties.uniquifier must be a string');\n    }\n\n    if (!is_1.default.string(properties.description)) {\n      throw new Error('properties.description must be a string');\n    }\n\n    this.project = properties.project;\n    this.uniquifier = properties.uniquifier;\n    this.description = properties.description;\n    this.agentVersion = properties.agentVersion;\n\n    if (properties.labels) {\n      this.labels = properties.labels;\n    }\n\n    if (properties.sourceContexts) {\n      this.sourceContexts = properties.sourceContexts;\n    }\n\n    if (properties.statusMessage) {\n      this.statusMessage = properties.statusMessage;\n    }\n  }\n\n}\n\nexports.Debuggee = Debuggee;","map":null,"metadata":{},"sourceType":"script"}