{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _slicedToArray = require(\"/Users/nickwhite/go/antipathy/allergen-ui/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nasync function getRetryConfig(err) {\n  let config = getConfig(err);\n\n  if (!err || !err.config || !config && !err.config.retry) {\n    return {\n      shouldRetry: false\n    };\n  }\n\n  config = config || {};\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n  config.retryDelay = config.retryDelay || 100;\n  config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n  config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n  const retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  // 1xx - Retry (Informational, request still processing)\n  // 2xx - Do not retry (Success)\n  // 3xx - Do not retry (Redirect)\n  // 4xx - Do not retry (Client errors)\n  // 429 - Retry (\"Too Many Requests\")\n  // 5xx - Retry (Server errors)\n  [100, 199], [429, 429], [500, 599]];\n  config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n  err.config.retryConfig = config; // Determine if we should retry the request\n\n  const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n\n  if (!shouldRetryFn(err)) {\n    return {\n      shouldRetry: false,\n      config: err.config\n    };\n  } // Calculate time to wait with exponential backoff.\n  // Formula: (2^c - 1 / 2) * 1000\n\n\n  const delay = (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n  err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n  const backoff = new Promise(resolve => {\n    setTimeout(resolve, delay);\n  }); // Notify the user if they added an `onRetryAttempt` handler\n\n  if (config.onRetryAttempt) {\n    config.onRetryAttempt(err);\n  } // Return the promise in which recalls Gaxios to retry the request\n\n\n  await backoff;\n  return {\n    shouldRetry: true,\n    config: err.config\n  };\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  const config = getConfig(err); // If there's no config, or retries are disabled, return.\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    let isInRange = false;\n\n    for (const _ref of config.statusCodesToRetry) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const min = _ref2[0];\n      const max = _ref2[1];\n      const status = err.response.status;\n\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":null,"metadata":{},"sourceType":"script"}