{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Validates if the AST represented by the node has obvious side-effects.\n * It catches the most common cases such as assignments, method calls, and\n * control flow. It doesn't (presently) catch property access that may end\n * up calling accessors.\n *\n * @param {Object} node AST Node (as per the Mozilla Parser API)\n * @return {boolean} if the exper\n */\n\nfunction isValid(node) {\n  // Empty expression is allowed\n  if (node === null) {\n    return true;\n  }\n\n  switch (node.type) {\n    case 'Program':\n      return node.body.every(isValid);\n    //\n    // S T A T E M E N T S\n    //\n\n    case 'EmptyStatement':\n      return true;\n\n    case 'ExpressionStatement':\n      return isValid(node.expression);\n\n    case 'BlockStatement':\n      return node.body.every(isValid);\n\n    case 'LabeledStatement':\n      return isValid(node.body);\n    //\n    // E X P R E S S I O N S\n    //\n\n    case 'AssignmentExpression':\n    case 'CallExpression':\n    case 'FunctionExpression':\n    case 'NewExpression':\n    case 'UpdateExpression':\n      return false;\n\n    case 'Identifier':\n    case 'Literal':\n    case 'ThisExpression':\n      return true;\n\n    case 'ArrayExpression':\n      return node.elements.every(isValid);\n\n    case 'BinaryExpression':\n    case 'LogicalExpression':\n      return isValid(node.left) && isValid(node.right);\n\n    case 'ConditionalExpression':\n      return isValid(node.test) && isValid(node.alternate) && isValid(node.consequent);\n\n    case 'MemberExpression':\n      return isValid(node.object) && isValid(node.property);\n\n    case 'ObjectExpression':\n      // every property is a valid expression\n      return node.properties.every(prop => {\n        return isValid(prop.value);\n      });\n\n    case 'SequenceExpression':\n      return node.expressions.every(isValid);\n\n    case 'UnaryExpression':\n      return isValid(node.argument);\n\n    case 'SpreadElement':\n      return isValid(node.argument);\n\n    case 'TemplateLiteral':\n      return node.quasis.every(isValid) && node.expressions.every(isValid);\n\n    case 'TaggedTemplateExpression':\n      return isValid(node.tag) && isValid(node.quasi);\n\n    case 'TemplateElement':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexports.isValid = isValid;","map":null,"metadata":{},"sourceType":"script"}