{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nmodule.exports = findit;\n\nfunction findit(basedir, opts) {\n  opts = opts || {};\n  var followSymlinks = !!opts.followSymlinks;\n  var myFs = opts.fs || fs;\n  var emitter = new EventEmitter();\n  var stopped = false;\n  var pending = 0;\n  var seen = {};\n  emitter.stop = stop;\n  walkPath(basedir);\n  return emitter;\n\n  function recursiveReadDir(basedir, linkPath) {\n    pendStart();\n    myFs.readdir(basedir, function (err, entries) {\n      if (stopped) return;\n\n      if (err) {\n        handleError(err, basedir);\n        pendEnd();\n        return;\n      }\n\n      entries.forEach(function (entry) {\n        var fullPath = path.join(basedir, entry);\n        var fullLinkPath = linkPath && path.join(linkPath, entry);\n        walkPath(fullPath, fullLinkPath);\n      });\n      pendEnd();\n    });\n  }\n\n  function walkPath(fullPath, linkPath) {\n    pendStart();\n    myFs.lstat(fullPath, function (err, stats) {\n      if (stopped) return;\n\n      if (err) {\n        handleError(err, fullPath);\n        pendEnd();\n        return;\n      }\n\n      emitter.emit('path', fullPath, stats, linkPath);\n      var dirStopped = false;\n\n      if (stats.isDirectory()) {\n        if (seen[fullPath]) {\n          err = new Error(\"file system loop detected\");\n          err.code = 'ELOOP';\n          handleError(err, fullPath);\n          pendEnd();\n          return;\n        }\n\n        seen[fullPath] = true;\n        emitter.emit('directory', fullPath, stats, stopDir, linkPath);\n        if (!dirStopped) recursiveReadDir(fullPath, linkPath);\n      } else if (stats.isFile()) {\n        if (!seen[fullPath]) {\n          seen[fullPath] = true;\n          emitter.emit('file', fullPath, stats, linkPath);\n        }\n      } else if (stats.isSymbolicLink()) {\n        emitter.emit('link', fullPath, stats, linkPath);\n        if (followSymlinks) recursiveReadLink(fullPath);\n      }\n\n      pendEnd();\n\n      function stopDir() {\n        dirStopped = true;\n      }\n    });\n  }\n\n  function recursiveReadLink(linkPath) {\n    pendStart();\n    myFs.readlink(linkPath, function (err, linkString) {\n      if (stopped) return;\n\n      if (err) {\n        handleError(err, linkPath);\n        pendEnd();\n        return;\n      }\n\n      var fullPath = path.resolve(path.dirname(linkPath), linkString);\n      emitter.emit('readlink', linkPath, fullPath);\n      walkPath(fullPath, linkPath);\n      pendEnd();\n    });\n  }\n\n  function stop() {\n    if (stopped) return;\n    stopped = true;\n    emitter.emit('stop');\n  }\n\n  function handleError(err, errPath) {\n    if (!err || stopped) return;\n    err.path = errPath;\n    emitter.emit('error', err);\n  }\n\n  function pendStart() {\n    pending += 1;\n  }\n\n  function pendEnd() {\n    if (stopped) return;\n    pending -= 1;\n\n    if (pending === 0) {\n      emitter.emit('end');\n    } else if (pending < 0) {\n      // this should never happen; if this gets thrown we need to debug findit\n      // and this stack trace will help.\n      throw new Error(\"pendEnd called too many times\");\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}