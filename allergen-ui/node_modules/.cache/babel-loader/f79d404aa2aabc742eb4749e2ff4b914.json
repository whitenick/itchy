{"ast":null,"code":"\"use strict\"; /// <reference lib=\"esnext\"/>\n/// <reference lib=\"dom\"/>\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // TODO: Use the `URL` global when targeting Node.js 10\n// eslint-disable-next-line @typescript-eslint/no-require-imports\n\nconst URLGlobal = typeof URL === 'undefined' ? require('url').URL : URL;\nconst toString = Object.prototype.toString;\n\nconst isOfType = type => value => typeof value === type;\n\nconst getObjectType = value => {\n  const objectName = toString.call(value).slice(8, -1);\n\n  if (objectName) {\n    return objectName;\n  }\n\n  return undefined;\n};\n\nconst isObjectOfType = type => value => getObjectType(value) === type;\n\nfunction is(value) {\n  switch (value) {\n    case null:\n      return \"null\"\n      /* null */\n      ;\n\n    case true:\n    case false:\n      return \"boolean\"\n      /* boolean */\n      ;\n\n    default:\n  }\n\n  switch (typeof value) {\n    case 'undefined':\n      return \"undefined\"\n      /* undefined */\n      ;\n\n    case 'string':\n      return \"string\"\n      /* string */\n      ;\n\n    case 'number':\n      return \"number\"\n      /* number */\n      ;\n\n    case 'bigint':\n      return \"bigint\"\n      /* bigint */\n      ;\n\n    case 'symbol':\n      return \"symbol\"\n      /* symbol */\n      ;\n\n    default:\n  }\n\n  if (is.function_(value)) {\n    return \"Function\"\n    /* Function */\n    ;\n  }\n\n  if (is.observable(value)) {\n    return \"Observable\"\n    /* Observable */\n    ;\n  }\n\n  if (is.array(value)) {\n    return \"Array\"\n    /* Array */\n    ;\n  }\n\n  if (is.buffer(value)) {\n    return \"Buffer\"\n    /* Buffer */\n    ;\n  }\n\n  const tagType = getObjectType(value);\n\n  if (tagType) {\n    return tagType;\n  }\n\n  if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n    throw new TypeError('Please don\\'t use object wrappers for primitive types');\n  }\n\n  return \"Object\"\n  /* Object */\n  ;\n}\n\nconst isObject = value => typeof value === 'object';\n\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nis.number = isOfType('number');\nis.bigint = isOfType('bigint'); // eslint-disable-next-line @typescript-eslint/ban-types\n\nis.function_ = isOfType('function');\n\nis.null_ = value => value === null;\n\nis.class_ = value => is.function_(value) && value.toString().startsWith('class ');\n\nis.boolean = value => value === true || value === false;\n\nis.symbol = isOfType('symbol');\n\nis.numericString = value => is.string(value) && value.length > 0 && !Number.isNaN(Number(value));\n\nis.array = Array.isArray;\n\nis.buffer = value => !is.nullOrUndefined(value) && !is.nullOrUndefined(value.constructor) && is.function_(value.constructor.isBuffer) && value.constructor.isBuffer(value);\n\nis.nullOrUndefined = value => is.null_(value) || is.undefined(value);\n\nis.object = value => !is.nullOrUndefined(value) && (is.function_(value) || isObject(value));\n\nis.iterable = value => !is.nullOrUndefined(value) && is.function_(value[Symbol.iterator]); // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n\n\nis.asyncIterable = value => !is.nullOrUndefined(value) && is.function_(value[Symbol.asyncIterator]);\n\nis.generator = value => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);\n\nis.nativePromise = value => isObjectOfType(\"Promise\"\n/* Promise */\n)(value);\n\nconst hasPromiseAPI = value => !is.null_(value) && isObject(value) && is.function_(value.then) && // eslint-disable-line promise/prefer-await-to-then\nis.function_(value.catch);\n\nis.promise = value => is.nativePromise(value) || hasPromiseAPI(value);\n\nis.generatorFunction = isObjectOfType(\"GeneratorFunction\"\n/* GeneratorFunction */\n); // eslint-disable-next-line @typescript-eslint/ban-types\n\nis.asyncFunction = isObjectOfType(\"AsyncFunction\"\n/* AsyncFunction */\n); // eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\n\nis.boundFunction = value => is.function_(value) && !value.hasOwnProperty('prototype');\n\nis.regExp = isObjectOfType(\"RegExp\"\n/* RegExp */\n);\nis.date = isObjectOfType(\"Date\"\n/* Date */\n);\nis.error = isObjectOfType(\"Error\"\n/* Error */\n);\n\nis.map = value => isObjectOfType(\"Map\"\n/* Map */\n)(value);\n\nis.set = value => isObjectOfType(\"Set\"\n/* Set */\n)(value);\n\nis.weakMap = value => isObjectOfType(\"WeakMap\"\n/* WeakMap */\n)(value);\n\nis.weakSet = value => isObjectOfType(\"WeakSet\"\n/* WeakSet */\n)(value);\n\nis.int8Array = isObjectOfType(\"Int8Array\"\n/* Int8Array */\n);\nis.uint8Array = isObjectOfType(\"Uint8Array\"\n/* Uint8Array */\n);\nis.uint8ClampedArray = isObjectOfType(\"Uint8ClampedArray\"\n/* Uint8ClampedArray */\n);\nis.int16Array = isObjectOfType(\"Int16Array\"\n/* Int16Array */\n);\nis.uint16Array = isObjectOfType(\"Uint16Array\"\n/* Uint16Array */\n);\nis.int32Array = isObjectOfType(\"Int32Array\"\n/* Int32Array */\n);\nis.uint32Array = isObjectOfType(\"Uint32Array\"\n/* Uint32Array */\n);\nis.float32Array = isObjectOfType(\"Float32Array\"\n/* Float32Array */\n);\nis.float64Array = isObjectOfType(\"Float64Array\"\n/* Float64Array */\n);\nis.bigInt64Array = isObjectOfType(\"BigInt64Array\"\n/* BigInt64Array */\n);\nis.bigUint64Array = isObjectOfType(\"BigUint64Array\"\n/* BigUint64Array */\n);\nis.arrayBuffer = isObjectOfType(\"ArrayBuffer\"\n/* ArrayBuffer */\n);\nis.sharedArrayBuffer = isObjectOfType(\"SharedArrayBuffer\"\n/* SharedArrayBuffer */\n);\nis.dataView = isObjectOfType(\"DataView\"\n/* DataView */\n);\n\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\n\nis.urlInstance = value => isObjectOfType(\"URL\"\n/* URL */\n)(value);\n\nis.urlString = value => {\n  if (!is.string(value)) {\n    return false;\n  }\n\n  try {\n    new URLGlobal(value); // eslint-disable-line no-new\n\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}; // TODO: Use the `not` operator with a type guard here when it's available.\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\n\n\nis.truthy = value => Boolean(value); // Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\n\n\nis.falsy = value => !value;\n\nis.nan = value => Number.isNaN(value);\n\nconst primitiveTypeOfTypes = new Set(['undefined', 'string', 'number', 'bigint', 'boolean', 'symbol']);\n\nis.primitive = value => is.null_(value) || primitiveTypeOfTypes.has(typeof value);\n\nis.integer = value => Number.isInteger(value);\n\nis.safeInteger = value => Number.isSafeInteger(value);\n\nis.plainObject = value => {\n  // From: https://github.com/sindresorhus/is-plain-obj/blob/master/index.js\n  if (getObjectType(value) !== \"Object\"\n  /* Object */\n  ) {\n      return false;\n    }\n\n  const prototype = Object.getPrototypeOf(value);\n  return prototype === null || prototype === Object.getPrototypeOf({});\n};\n\nconst typedArrayTypes = new Set([\"Int8Array\"\n/* Int8Array */\n, \"Uint8Array\"\n/* Uint8Array */\n, \"Uint8ClampedArray\"\n/* Uint8ClampedArray */\n, \"Int16Array\"\n/* Int16Array */\n, \"Uint16Array\"\n/* Uint16Array */\n, \"Int32Array\"\n/* Int32Array */\n, \"Uint32Array\"\n/* Uint32Array */\n, \"Float32Array\"\n/* Float32Array */\n, \"Float64Array\"\n/* Float64Array */\n, \"BigInt64Array\"\n/* BigInt64Array */\n, \"BigUint64Array\"\n/* BigUint64Array */\n]);\n\nis.typedArray = value => {\n  const objectType = getObjectType(value);\n\n  if (objectType === undefined) {\n    return false;\n  }\n\n  return typedArrayTypes.has(objectType);\n};\n\nconst isValidLength = value => is.safeInteger(value) && value >= 0;\n\nis.arrayLike = value => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\n\nis.inRange = (value, range) => {\n  if (is.number(range)) {\n    return value >= Math.min(0, range) && value <= Math.max(range, 0);\n  }\n\n  if (is.array(range) && range.length === 2) {\n    return value >= Math.min(...range) && value <= Math.max(...range);\n  }\n\n  throw new TypeError(\"Invalid range: \".concat(JSON.stringify(range)));\n};\n\nconst NODE_TYPE_ELEMENT = 1;\nconst DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];\n\nis.domElement = value => is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n\nis.observable = value => {\n  if (!value) {\n    return false;\n  } // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n\n\n  if (value[Symbol.observable] && value === value[Symbol.observable]()) {\n    return true;\n  }\n\n  if (value['@@observable'] && value === value['@@observable']()) {\n    return true;\n  }\n\n  return false;\n};\n\nis.nodeStream = value => !is.nullOrUndefined(value) && isObject(value) && is.function_(value.pipe) && !is.observable(value);\n\nis.infinite = value => value === Infinity || value === -Infinity;\n\nconst isAbsoluteMod2 = remainder => value => is.integer(value) && Math.abs(value % 2) === remainder;\n\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\n\nis.emptyArray = value => is.array(value) && value.length === 0;\n\nis.nonEmptyArray = value => is.array(value) && value.length > 0;\n\nis.emptyString = value => is.string(value) && value.length === 0; // TODO: Use `not ''` when the `not` operator is available.\n\n\nis.nonEmptyString = value => is.string(value) && value.length > 0;\n\nconst isWhiteSpaceString = value => is.string(value) && /\\S/.test(value) === false;\n\nis.emptyStringOrWhitespace = value => is.emptyString(value) || isWhiteSpaceString(value);\n\nis.emptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0; // TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\n\n\nis.nonEmptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\n\nis.emptySet = value => is.set(value) && value.size === 0;\n\nis.nonEmptySet = value => is.set(value) && value.size > 0;\n\nis.emptyMap = value => is.map(value) && value.size === 0;\n\nis.nonEmptyMap = value => is.map(value) && value.size > 0;\n\nconst predicateOnArray = (method, predicate, values) => {\n  if (is.function_(predicate) === false) {\n    throw new TypeError(\"Invalid predicate: \".concat(JSON.stringify(predicate)));\n  }\n\n  if (values.length === 0) {\n    throw new TypeError('Invalid number of values');\n  }\n\n  return method.call(values, predicate);\n};\n\nis.any = (predicate, ...values) => predicateOnArray(Array.prototype.some, predicate, values);\n\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values); // Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\n\n\nObject.defineProperties(is, {\n  class: {\n    value: is.class_\n  },\n  function: {\n    value: is.function_\n  },\n  null: {\n    value: is.null_\n  }\n});\nexports.default = is; // For CommonJS default export support\n\nmodule.exports = is;\nmodule.exports.default = is;","map":null,"metadata":{},"sourceType":"script"}