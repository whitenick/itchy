{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst options_1 = require(\"./options\"); // tslint:disable-next-line no-var-requires\n\n\nconst pkg = require('../../package.json');\n\nconst PRODUCT_NAME = 'google-api-nodejs-client';\n\nclass DefaultTransporter {\n  /**\n   * Configures request options before making a request.\n   * @param opts GaxiosOptions options.\n   * @return Configured options.\n   */\n  configure(opts = {}) {\n    opts.headers = opts.headers || {};\n\n    if (typeof window === 'undefined') {\n      // set transporter user agent if not in browser\n      const uaValue = opts.headers['User-Agent'];\n\n      if (!uaValue) {\n        opts.headers['User-Agent'] = DefaultTransporter.USER_AGENT;\n      } else if (!uaValue.includes(\"\".concat(PRODUCT_NAME, \"/\"))) {\n        opts.headers['User-Agent'] = \"\".concat(uaValue, \" \").concat(DefaultTransporter.USER_AGENT);\n      }\n    }\n\n    return opts;\n  }\n\n  request(opts, callback) {\n    // ensure the user isn't passing in request-style options\n    opts = this.configure(opts);\n\n    try {\n      options_1.validate(opts);\n    } catch (e) {\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    if (callback) {\n      gaxios_1.request(opts).then(r => {\n        callback(null, r);\n      }, e => {\n        callback(this.processError(e));\n      });\n    } else {\n      return gaxios_1.request(opts).catch(e => {\n        throw this.processError(e);\n      });\n    }\n  }\n  /**\n   * Changes the error to include details from the body.\n   */\n\n\n  processError(e) {\n    const res = e.response;\n    const err = e;\n    const body = res ? res.data : null;\n\n    if (res && body && body.error && res.status !== 200) {\n      if (typeof body.error === 'string') {\n        err.message = body.error;\n        err.code = res.status.toString();\n      } else if (Array.isArray(body.error.errors)) {\n        err.message = body.error.errors.map(err2 => err2.message).join('\\n');\n        err.code = body.error.code;\n        err.errors = body.error.errors;\n      } else {\n        err.message = body.error.message;\n        err.code = body.error.code || res.status;\n      }\n    } else if (res && res.status >= 400) {\n      // Consider all 4xx and 5xx responses errors.\n      err.message = body;\n      err.code = res.status.toString();\n    }\n\n    return err;\n  }\n\n}\n/**\n * Default user agent.\n */\n\n\nDefaultTransporter.USER_AGENT = \"\".concat(PRODUCT_NAME, \"/\").concat(pkg.version);\nexports.DefaultTransporter = DefaultTransporter;","map":null,"metadata":{},"sourceType":"script"}