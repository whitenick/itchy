{"ast":null,"code":"import _slicedToArray from \"/Users/nickwhite/go/antipathy/allergen-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nickwhite/go/antipathy/allergen-ui/src/components/Title.js\";\nimport React from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { useState, useEffect } from 'react';\n\nconst Title = ({\n  text,\n  allergens,\n  setAllergens\n}) => {\n  const _useState = useState([{\n    value: \"None Selected\"\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        ohNo = _useState2[0],\n        selectedOhNo = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        seleced = _useState4[0],\n        setSelected = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        inputGroups = _useState6[0],\n        setInputs = _useState6[1];\n\n  const _useState7 = useState(1),\n        _useState8 = _slicedToArray(_useState7, 2),\n        groupCount = _useState8[0],\n        setCount = _useState8[1];\n\n  const registerAllergies = e => {\n    var valueArray = allergens.map(a => a.value);\n  };\n\n  useEffect(() => {\n    setAllergens(seleced);\n  }, [seleced]);\n\n  const handleInput = e => {\n    console.log(e.target.value);\n    var newState = {\n      key: e.target.key,\n      value: e.target.value\n    };\n    setAllergens([...allergens, newState]);\n  };\n\n  const inputItem = () => {\n    var inputList = [];\n\n    var inputFrame = () => {\n      return React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(InputGroupText, {\n        onChange: e => handleInput(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(Input, {\n        addon: true,\n        type: \"checkbox\",\n        \"aria-label\": \"Checkbox for following text input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }))), React.createElement(Input, {\n        key: Math.floor(Math.random() * 20),\n        type: \"text\",\n        onChange: e => handleInput(e),\n        placeholder: \"Add ingredient ...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }));\n    };\n\n    for (var i = 0; i < groupCount; i++) {\n      inputList.push(inputFrame());\n    }\n\n    setInputs([inputList]);\n  };\n\n  useEffect(() => {\n    inputItem();\n  }, [groupCount]);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, inputGroups, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setCount(groupCount + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"add ingeredient...\")), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: e => registerAllergies(e),\n    variant: \"primary\",\n    size: \"md\",\n    active: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Submit\"))));\n};\n\nexport default Title;","map":{"version":3,"sources":["/Users/nickwhite/go/antipathy/allergen-ui/src/components/Title.js"],"names":["React","Form","Button","InputGroup","InputGroupAddon","InputGroupText","Input","useState","useEffect","Title","text","allergens","setAllergens","value","ohNo","selectedOhNo","seleced","setSelected","inputGroups","setInputs","groupCount","setCount","registerAllergies","e","valueArray","map","a","handleInput","console","log","target","newState","key","inputItem","inputList","inputFrame","Math","floor","random","i","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Form, Button} from 'react-bootstrap';\nimport {InputGroup, InputGroupAddon, InputGroupText, Input} from 'reactstrap';\nimport {useState, useEffect} from 'react';\n\nconst Title = ({ text, allergens, setAllergens }) => {\n    const [ohNo, selectedOhNo] = useState([{value: \"None Selected\"}])\n    const [seleced, setSelected] = useState([]);\n    const [inputGroups, setInputs] = useState([]);\n    const [groupCount, setCount] = useState(1);\n\n    const registerAllergies = (e) => {\n        var valueArray = allergens.map(a => a.value);\n    }\n\n    useEffect(() => {\n        setAllergens(seleced);\n    }, [seleced]);\n\n    const handleInput = (e) => {\n        console.log(e.target.value);\n        var newState = {\n            key: e.target.key,\n            value: e.target.value\n        }\n        setAllergens([...allergens, newState])\n    }\n\n    const inputItem = () => {\n        var inputList = [];\n        var inputFrame = () => {\n            return (\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText onChange={(e) => handleInput(e)}>\n                            <Input addon type=\"checkbox\" aria-label=\"Checkbox for following text input\" />\n                        </InputGroupText>\n                    </InputGroupAddon>\n                    <Input key={Math.floor(Math.random() * 20)} type=\"text\" onChange={(e) => handleInput(e)} placeholder=\"Add ingredient ...\" />\n                </InputGroup>\n            );\n        }\n        for (var i = 0; i < groupCount; i++) {\n            inputList.push(inputFrame());\n        }\n\n        setInputs([inputList]);\n    }\n\n    useEffect(() => {\n        inputItem();\n    }, [groupCount]);\n    \n    return (\n        <div className='container'>\n            <Form>\n                {inputGroups}\n                <div className='row'>\n                    <Button onClick={() => setCount(groupCount + 1)}>\n                        add ingeredient...\n                    </Button>\n                </div>\n                <div className='row'>\n                    <Button onClick={(e) => registerAllergies(e)} variant=\"primary\" size=\"md\" active>\n                        Submit\n                    </Button>\n                </div>\n            </Form>    \n        </div>\n    );\n}\n\nexport default Title;\n\n  "]},"metadata":{},"sourceType":"module"}