{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debuglet_1 = require(\"./agent/debuglet\");\n\nconst debug_1 = require(\"./client/stackdriver/debug\");\n\nconst pjson = require('../../package.json'); // Singleton.\n\n\nlet debuglet;\n/**\n * Start the Debug agent that will make your application available for debugging\n * with Stackdriver Debug.\n *\n * @param options - Authentication and agent configuration.\n *\n * @resource [Introductory video]{@link\n * https://www.youtube.com/watch?v=tyHcK_kAOpw}\n *\n * @example\n * debug.startAgent();\n */\n\nfunction start(options) {\n  options = options || {};\n  const agentConfig = mergeConfigs(options); // forceNewAgent_ is for testing purposes only.\n\n  if (debuglet && !agentConfig.forceNewAgent_) {\n    throw new Error('Debug Agent has already been started');\n  }\n\n  const debug = new debug_1.Debug(options, pjson);\n  debuglet = new debuglet_1.Debuglet(debug, agentConfig);\n  debuglet.start();\n  return agentConfig.testMode_ ? debuglet : debuglet.isReadyManager;\n}\n\nexports.start = start;\n/**\n * If the given `options` object has a `debug` property\n * of the same type, this function returns the union of the\n * properties in `options.debug` and `options` except that\n * the returned object no longer has a `debug` property.\n * If a field exists in both `options` and `options.debug`,\n * the value in `option.debug` takes precedence.\n */\n\nfunction mergeConfigs(options) {\n  if (!options.debug) {\n    return options;\n  }\n\n  const result = Object.assign({}, options);\n  delete result.debug;\n  return Object.assign(result, options.debug);\n}\n/* Used to access the agent if it has been started.  Returns the agent\n * if the agent has been started.  Otherwise, `undefined` is returned.\n */\n\n\nfunction get() {\n  return debuglet;\n}\n\nexports.get = get;","map":null,"metadata":{},"sourceType":"script"}