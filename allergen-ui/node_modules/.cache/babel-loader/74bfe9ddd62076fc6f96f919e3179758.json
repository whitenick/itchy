{"ast":null,"code":"import _slicedToArray from \"/Users/nickwhite/go/antipathy/allergen-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nickwhite/go/antipathy/allergen-ui/src/components/Title.js\";\nimport React from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { useState, useEffect } from 'react';\n\nconst Title = ({\n  text,\n  allergens\n}) => {\n  const _useState = useState([{\n    value: \"None Selected\"\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        ohNo = _useState2[0],\n        selectedOhNo = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        seleced = _useState4[0],\n        setSelected = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        inputGroups = _useState6[0],\n        setInputs = _useState6[1];\n\n  const _useState7 = useState(1),\n        _useState8 = _slicedToArray(_useState7, 2),\n        groupCount = _useState8[0],\n        setCount = _useState8[1];\n\n  const registerAllergies = e => {\n    console.log(e);\n    console.log(seleced);\n  };\n\n  useEffect(() => {\n    allergens(seleced);\n  }, [seleced]);\n\n  const handleInput = e => {\n    console.log(e.target);\n  };\n\n  const inputItem = () => {\n    var inputList = [];\n\n    var inputFrame = () => {\n      return React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(InputGroupText, {\n        onChange: e => handleInput(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(Input, {\n        addon: true,\n        type: \"checkbox\",\n        \"aria-label\": \"Checkbox for following text input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }))), React.createElement(Input, {\n        onChange: e => handleInput(e),\n        placeholder: \"Add ingredient ...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }));\n    };\n\n    for (var i = 0; i < groupCount; i++) {\n      inputList.push(inputFrame());\n    }\n\n    setInputs([inputList]);\n  };\n\n  useEffect(() => {\n    inputItem();\n  }, [groupCount]);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, inputGroups, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setCount(groupCount + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"add ingeredient...\")), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: e => registerAllergies(e),\n    variant: \"primary\",\n    size: \"md\",\n    active: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Submit\"))));\n};\n\nexport default Title;","map":{"version":3,"sources":["/Users/nickwhite/go/antipathy/allergen-ui/src/components/Title.js"],"names":["React","Form","Button","InputGroup","InputGroupAddon","InputGroupText","Input","useState","useEffect","Title","text","allergens","value","ohNo","selectedOhNo","seleced","setSelected","inputGroups","setInputs","groupCount","setCount","registerAllergies","e","console","log","handleInput","target","inputItem","inputList","inputFrame","i","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Form, Button} from 'react-bootstrap';\nimport {InputGroup, InputGroupAddon, InputGroupText, Input} from 'reactstrap';\nimport {useState, useEffect} from 'react';\n\nconst Title = ({text, allergens}) => {\n    const [ohNo, selectedOhNo] = useState([{value: \"None Selected\"}])\n    const [seleced, setSelected] = useState([]);\n    const [inputGroups, setInputs] = useState([]);\n    const [groupCount, setCount] = useState(1);\n\n    const registerAllergies = (e) => {\n        console.log(e);\n        console.log(seleced);\n    }\n\n    useEffect(() => {\n        allergens(seleced);\n    }, [seleced]);\n\n    const handleInput = (e) => {\n        console.log(e.target);\n    }\n\n    const inputItem = () => {\n        var inputList = [];\n        var inputFrame = () => {\n            return (\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText onChange={(e) => handleInput(e)}>\n                            <Input addon type=\"checkbox\" aria-label=\"Checkbox for following text input\" />\n                        </InputGroupText>\n                    </InputGroupAddon>\n                    <Input onChange={(e) => handleInput(e)} placeholder=\"Add ingredient ...\" />\n                </InputGroup>\n            );\n        }\n        for (var i = 0; i < groupCount; i++) {\n            inputList.push(inputFrame());\n        }\n\n        setInputs([inputList]);\n    }\n\n    useEffect(() => {\n        inputItem();\n    }, [groupCount]);\n    \n    return (\n        <div className='container'>\n            <Form>\n                {inputGroups}\n                <div className='row'>\n                    <Button onClick={() => setCount(groupCount + 1)}>\n                        add ingeredient...\n                    </Button>\n                </div>\n                <div className='row'>\n                    <Button onClick={(e) => registerAllergies(e)} variant=\"primary\" size=\"md\" active>\n                        Submit\n                    </Button>\n                </div>\n            </Form>\n            \n        </div>\n    );\n}\n\nexport default Title;\n\n  "]},"metadata":{},"sourceType":"module"}