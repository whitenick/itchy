{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis) {\n    const opts = optionsOrClientId && typeof optionsOrClientId === 'object' ? optionsOrClientId : {\n      clientId: optionsOrClientId,\n      clientSecret,\n      refreshToken,\n      eagerRefreshThresholdMillis\n    };\n    super({\n      clientId: opts.clientId,\n      clientSecret: opts.clientSecret,\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis\n    });\n    this._refreshToken = opts.refreshToken;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken An ignored refreshToken..\n   * @param callback Optional callback.\n   */\n\n\n  async refreshTokenNoCache(refreshToken) {\n    return super.refreshTokenNoCache(this._refreshToken);\n  }\n  /**\n   * Create a UserRefreshClient credentials instance using the given input\n   * options.\n   * @param json The input object.\n   */\n\n\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the user refresh token');\n    }\n\n    if (json.type !== 'authorized_user') {\n      throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n    }\n\n    if (!json.client_id) {\n      throw new Error('The incoming JSON object does not contain a client_id field');\n    }\n\n    if (!json.client_secret) {\n      throw new Error('The incoming JSON object does not contain a client_secret field');\n    }\n\n    if (!json.refresh_token) {\n      throw new Error('The incoming JSON object does not contain a refresh_token field');\n    }\n\n    this._clientId = json.client_id;\n    this._clientSecret = json.client_secret;\n    this._refreshToken = json.refresh_token;\n    this.credentials.refresh_token = json.refresh_token;\n  }\n\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(r => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n\n  async fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        return reject(new Error('Must pass in a stream containing the user refresh token.'));\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          return resolve();\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n\n}\n\nexports.UserRefreshClient = UserRefreshClient;","map":null,"metadata":{},"sourceType":"script"}