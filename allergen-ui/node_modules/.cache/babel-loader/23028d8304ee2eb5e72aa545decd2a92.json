{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst forge = require(\"node-forge\");\n\nconst util_1 = require(\"util\");\n\nconst readFile = util_1.promisify(fs.readFile);\n\nfunction getPem(filename, callback) {\n  if (callback) {\n    getPemAsync(filename).then(pem => callback(null, pem)).catch(err => callback(err, null));\n  } else {\n    return getPemAsync(filename);\n  }\n}\n\nexports.getPem = getPem;\n\nfunction getPemAsync(filename) {\n  return readFile(filename, {\n    encoding: 'base64'\n  }).then(keyp12 => {\n    return convertToPem(keyp12);\n  });\n}\n/**\n * Converts a P12 in base64 encoding to a pem.\n * @param p12base64 String containing base64 encoded p12.\n * @returns a string containing the pem.\n */\n\n\nfunction convertToPem(p12base64) {\n  const p12Der = forge.util.decode64(p12base64);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n  const bags = p12.getBags({\n    friendlyName: 'privatekey'\n  });\n\n  if (bags.friendlyName) {\n    const privateKey = bags.friendlyName[0].key;\n    const pem = forge.pki.privateKeyToPem(privateKey);\n    return pem.replace(/\\r\\n/g, '\\n');\n  } else {\n    throw new Error('Unable to get friendly name.');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}